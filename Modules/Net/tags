!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AutoType	autotype.h	/^AutoType::AutoType(const AutoType& at)$/;"	f	class:AutoType
AutoType	autotype.h	/^AutoType::AutoType(const char* str)$/;"	f	class:AutoType
AutoType	autotype.h	/^AutoType::AutoType(const char* str, int len)$/;"	f	class:AutoType
AutoType	autotype.h	/^AutoType::AutoType(long num)$/;"	f	class:AutoType
AutoType	autotype.h	/^class AutoType {$/;"	c
ConnContainer	srv/net.h	/^    typedef std::map<QTcpSocket *,int> ConnContainer; \/\/ <conn,protLen>$/;"	t	class:Net
I2M	prot.h	/^typedef std::map<int, S2A>                     I2M;$/;"	t
I2MIter	prot.h	/^typedef I2M::iterator                          I2MIter;$/;"	t
Net	srv/net.h	/^Net::Net(int port):m_tcpServer(0)$/;"	f	class:Net
Net	srv/net.h	/^class Net : public QObject$/;"	c
Prot	prot.h	/^Prot::Prot(int protId)$/;"	f	class:Prot
Prot	prot.h	/^class Prot$/;"	c
S2A	prot.h	/^typedef std::map<String, AutoType, StrCmp>     S2A;$/;"	t
S2AIter	prot.h	/^typedef S2A::iterator                          S2AIter;$/;"	t
StrCmp	prot.h	/^class StrCmp:std::less<String>$/;"	c
String	String.h	/^String::String(const String &s)$/;"	f	class:String
String	String.h	/^String::String(const char *s)$/;"	f	class:String
String	String.h	/^class String$/;"	c
T1	prot.cpp	/^static const char T1 = 0xF1; \/\/ 正,8位$/;"	v	file:
T2	prot.cpp	/^static const char T2 = 0xF2; \/\/ 正,16位$/;"	v	file:
T3	prot.cpp	/^static const char T3 = 0xF4; \/\/ 正,32位$/;"	v	file:
VALUE_TYPE_NUMBER	autotype.h	/^const char VALUE_TYPE_NUMBER = 'n';$/;"	v
VALUE_TYPE_STRING	autotype.h	/^const char VALUE_TYPE_STRING = 's';$/;"	v
__AUTOTYPE_H_	autotype.h	12;"	d
__NET_H_	srv/net.h	13;"	d
__PROT_H_	prot.h	13;"	d
__STRING_H_	String.h	12;"	d
buffer	autotype.h	/^    char *buffer;$/;"	m	class:AutoType
c_str	String.h	/^    const char* c_str() const {return str;}$/;"	f	class:String
getField	prot.h	/^AutoType& Prot::getField(const char* fieldName)$/;"	f	class:Prot
getNum	autotype.h	/^long AutoType::getNum() {$/;"	f	class:AutoType
getStr	autotype.h	/^const char* AutoType::getStr()$/;"	f	class:AutoType
getType	autotype.h	/^    char getType() {return type;}$/;"	f	class:AutoType
handleDisConnected	srv/net.cpp	/^void Net::handleDisConnected()$/;"	f	class:Net
handleNewConnection	srv/net.cpp	/^void Net::handleNewConnection()$/;"	f	class:Net
handleReceive	srv/net.cpp	/^void Net::handleReceive()$/;"	f	class:Net
m_cliConns	srv/net.h	/^    ConnContainer  m_cliConns;$/;"	m	class:Net
m_mutexConn	srv/net.h	/^    QMutex         m_mutexConn; $/;"	m	class:Net
m_prot	prot.h	/^    I2MIter m_prot;             \/\/当前协议$/;"	m	class:Prot
m_tcpServer	srv/net.h	/^    QTcpServer*    m_tcpServer;$/;"	m	class:Net
main	srv/test.cpp	/^int main(int argc, char **argv)$/;"	f
main	test.cpp	/^int main(int argc, const char** argv)$/;"	f
operator ()	prot.h	/^    bool operator()(const String &str1, const String &str2) const{$/;"	f	class:StrCmp
operator =	String.h	/^String& String::operator=(const String& s)$/;"	f	class:String
operator =	autotype.h	/^AutoType& AutoType::operator=(const AutoType& at)$/;"	f	class:AutoType
pickBufferInfo	prot.cpp	/^bool Prot::pickBufferInfo(char* bufferAddr, int bufferLength, int& o_protId, int& o_protLen)$/;"	f	class:Prot
s_init	prot.cpp	/^void Prot::s_init()$/;"	f	class:Prot
serialize	prot.cpp	/^int Prot::serialize(char* bufferAddr, int bufferLength)$/;"	f	class:Prot
serializeIntValue	prot.cpp	/^int serializeIntValue(long value,char *buffer,int bufferlen){$/;"	f
serializeStringValue	prot.cpp	/^int serializeStringValue(const char* value,char *buffer,int bufferlen){$/;"	f
setField	prot.h	/^void Prot::setField(const char* fieldName, const char *value)$/;"	f	class:Prot
setField	prot.h	/^void Prot::setField(const char* fieldName, long value)$/;"	f	class:Prot
setProt	prot.h	/^void Prot::setProt(int protId)$/;"	f	class:Prot
sm_protDic	prot.cpp	/^I2M Prot::sm_protDic;      \/\/协议词典 $/;"	m	class:Prot	file:
sm_protDic	prot.h	/^    static I2M sm_protDic;      \/\/协议词典 $/;"	m	class:Prot
start	srv/net.cpp	/^void Net::start(int port)$/;"	f	class:Net
str	String.h	/^    char *str;$/;"	m	class:String
t1	prot.cpp	/^static const char t1 = 0x01; \/\/ 负,8位$/;"	v	file:
t2	prot.cpp	/^static const char t2 = 0x02; \/\/ 负,16位$/;"	v	file:
t3	prot.cpp	/^static const char t3 = 0x04; \/\/ 负,32位$/;"	v	file:
testSerializeIntValueUnserializeIntValue	prot.cpp	/^void testSerializeIntValueUnserializeIntValue()$/;"	f
testSerializeStringValue	prot.cpp	/^void testSerializeStringValue()$/;"	f
testSerializeUnserialize	prot.cpp	/^void testSerializeUnserialize()$/;"	f
type	autotype.h	/^    char type;$/;"	m	class:AutoType
unSerialize	prot.cpp	/^int Prot::unSerialize(char* bufferAddr, int bufferLength)$/;"	f	class:Prot
unSerializeIntValue	prot.cpp	/^int unSerializeIntValue(long &value, char* buffer, int bufferlen){$/;"	f
~AutoType	autotype.h	/^    virtual ~AutoType() {delete [] buffer;}$/;"	f	class:AutoType
~Net	srv/net.h	/^Net::~Net()$/;"	f	class:Net
~Prot	prot.h	/^Prot::~Prot()$/;"	f	class:Prot
~String	String.h	/^    ~String() {delete [] str;}$/;"	f	class:String
